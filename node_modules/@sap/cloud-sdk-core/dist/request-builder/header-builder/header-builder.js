"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var rambda_1 = require("rambda");
var request_1 = require("../request");
var authorization_header_1 = require("./authorization-header");
var csrf_token_header_1 = require("./csrf-token-header");
/**
 * Create object containing all headers, including custom headers for a given  OData request configuration and destination.
 * Custom headers override duplicate headers.
 *
 * @typeparam EntityT Type of the entity the headers are built for
 * @param {ODataRequest<RequestT>} request OData request configuration to create headers for
 * @returns Key-value pairs where the key is the name of a header property and the value is the respective value
 */
function buildHeaders(request) {
    return buildHeadersAuthFirstCustomLast(request)(addEtagHeader(request.config), function (headers) { return csrf_token_header_1.addCsrfTokenAndCookies(request, headers); }, addAcceptHeader, addContentTypeHeader, exports.addSapClientHeader(request.destination.sapClient), exports.addProxyHeaders(request.destination.proxyConfiguration));
}
exports.buildHeaders = buildHeaders;
/**
 * Builds the authorization, proxy authorization and SAP client headers for a given destination.
 *
 * @param destination A destination.
 * @returns HTTP headers for the given destination.
 */
exports.buildHeadersForDestination = function (destination) {
    return cloud_sdk_util_1.asyncPipe(exports.addSapClientHeader(destination.sapClient), exports.addProxyHeaders(destination.proxyConfiguration), authorization_header_1.buildAndAddAuthorizationHeader(destination))({});
};
exports.addSapClientHeader = function (sapClient) { return function (headers) { return cloud_sdk_util_1.assocSome('sap-client', sapClient)(headers); }; };
exports.addProxyHeaders = function (proxyConfiguration) { return function (headers) {
    return cloud_sdk_util_1.mergeSome(headers, rambda_1.path(['headers'], proxyConfiguration));
}; };
var buildHeadersAuthFirstCustomLast = function (request) { return function () {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return cloud_sdk_util_1.asyncPipe.apply(void 0, [function (headers) { return authorization_header_1.addAuthorizationHeader(request, headers); }].concat(fns, [addCustomHeaders(request.config.customHeaders)]))({});
}; };
var addEtagHeader = function (requestConfig) { return function (headers) {
    return cloud_sdk_util_1.assocSome('if-match', getETagHeader(requestConfig))(headers);
}; };
var addCustomHeaders = function (customHeaders) { return function (headers) { return (__assign({}, headers, customHeaders)); }; };
var addContentTypeHeader = function (headers) { return rambda_1.assoc('Content-Type', 'application/json')(headers); };
var addAcceptHeader = function (headers) { return rambda_1.assoc('Accept', 'application/json')(headers); };
var eTagFromUpdateConfig = function (config) { return (config.versionIdentifierIgnored ? '*' : config.eTag); };
var getETagHeader = function (config) {
    return rambda_1.ifElse(function (c) { return c instanceof request_1.ODataUpdateRequestConfig; }, eTagFromUpdateConfig, function () { return undefined; })(config) ||
        rambda_1.ifElse(function (c) { return c instanceof request_1.ODataDeleteRequestConfig; }, function (c) { return c.eTag; }, function () { return undefined; })(config);
};
//# sourceMappingURL=header-builder.js.map