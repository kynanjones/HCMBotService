/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { MapType } from '@sap/cloud-sdk-util';
import { Constructable } from '../constructable';
import { Entity, EntityIdentifiable } from '../entity';
import { Destination, DestinationNameAndJwt, DestinationRetrievalOptions } from '../scp-cf/destination-service-types';
import { FieldType } from '../selectable/field';
import { MethodRequestBuilderBase } from './request-builder-base';
import { ODataDeleteRequestConfig } from './request/odata-delete-request-config';
/**
 * Create OData query to delete an entity.
 *
 * @typeparam EntityT Type of the entity to be deleted
 */
export declare class DeleteRequestBuilder<EntityT extends Entity> extends MethodRequestBuilderBase<ODataDeleteRequestConfig<EntityT>> implements EntityIdentifiable<EntityT> {
    readonly entityConstructor: Constructable<EntityT>;
    /**
     * Creates an instance of DeleteRequestBuilder. If the entity is passed, version identifier will also be added.
     *
     * @param entityConstructor Constructor type of the entity to be deleted
     * @param keysOrEntity Entity or Key-value pairs of key properties for the given entity
     */
    constructor(entityConstructor: Constructable<EntityT>, keysOrEntity: MapType<FieldType> | Entity);
    /**
     * Add ETag version identifier in the delete request header.
     *
     * @param etag The version identifier of the entity
     * @returns {this} The builder itself, to facilitate method chaining
     */
    setVersionIdentifier(etag: string): this;
    /**
     * Execute query.
     *
     * @param destination Destination to execute the request against
     * @param options Options to employ when fetching destinations
     * @returns A promise resolving once the entity was deleted
     */
    execute(destination: Destination | DestinationNameAndJwt, options?: DestinationRetrievalOptions): Promise<void>;
}
//# sourceMappingURL=delete-request-builder.d.ts.map