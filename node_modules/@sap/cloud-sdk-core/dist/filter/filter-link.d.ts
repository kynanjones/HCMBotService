/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { Constructable } from '../constructable';
import { Entity, EntityIdentifiable } from '../entity';
import { Link } from '../selectable';
import { Filterable } from './filterable';
/**
 * Data structure to represent filter on properties of a navigation property (link).
 * In OData v2 filtering for navigation properties is ONLY supported for properties with a one-to-one cardinality ({OneToOneLink}).
 *
 * Example:
 * In the following filter statement `Entity.requestBuilder().filter(Entity.to_NavProperty.filter(LinkedEntity.property.equals(value)))`,
 * `Entity.to_NavProperty.filter(LinkedEntity.property.equals(value))` is a FilterLink.
 *
 * @typeparam EntityT Type of the entity to be filtered
 * @typeparam LinkedEntityT Type of the linked entity which is used in the filter
 */
export declare class FilterLink<EntityT extends Entity, LinkedEntityT extends Entity> implements EntityIdentifiable<EntityT> {
    link: Link<EntityT, LinkedEntityT>;
    filters: Array<Filterable<LinkedEntityT>>;
    /**
     * Constructor type of the entity to be filtered.
     */
    readonly entityConstructor: Constructable<EntityT>;
    /**
     * Linked entity to be filtered by.
     */
    readonly linkedEntityType: LinkedEntityT;
    /**
     * Creates an instance of FilterLink.
     *
     * @param link Linked entity to be used in the filter
     * @param filters List of filterables for the linked entity
     */
    constructor(link: Link<EntityT, LinkedEntityT>, filters: Array<Filterable<LinkedEntityT>>);
}
export declare function isFilterLink<T extends Entity, LinkedT extends Entity>(filterable: Filterable<T>): filterable is FilterLink<T, LinkedT>;
//# sourceMappingURL=filter-link.d.ts.map