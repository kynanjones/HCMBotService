/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { Constructable } from '../constructable';
import { EdmType } from '../edm-types';
import { Entity, EntityIdentifiable } from '../entity';
import { FieldType } from '../selectable';
import { Filterable } from './filterable';
declare type FilterOperatorString = 'eq' | 'ne' | 'contains';
declare type FilterOperatorBoolean = 'eq' | 'ne';
declare type FilterOperatorNumber = 'eq' | 'ne' | 'lt' | 'le' | 'gt' | 'ge';
export declare type FilterOperator = FilterOperatorString | FilterOperatorBoolean | FilterOperatorNumber;
export declare type FilterOperatorByType<FieldT extends FieldType> = FieldT extends string ? FilterOperatorString : FieldT extends number ? FilterOperatorNumber : FilterOperatorBoolean;
/**
 * Represents a filter expression to narrow the data on a [[GetAllRequestBuilder request for multiple entities]] that match the specified criteria.
 * A filter refers to the field of an entity and restricts the request based on an operator and a value. `Entity.FIELD_NAME.operator(value)`
 *
 * Example: `Product.NAME.equals('cloud-sdk')` creates a filter for the entity `Product` that matches in case the field `NAME` equals 'cloud-sdk'.
 *
 * See also: [[Filterable]]
 * @typeparam EntityT Type of the entity to be filtered on
 * @typeparam FieldT Type of the field to be filtered by, see also: [[FieldType]]
 */
export declare class Filter<EntityT extends Entity, FieldT extends FieldType> implements EntityIdentifiable<EntityT> {
    fieldName: string;
    operator: FilterOperator;
    value: FieldT;
    edmType?: EdmType;
    andFilters: Array<Filterable<EntityT>>;
    orFilters: Array<Filterable<EntityT>>;
    /**
     * Constructor type of the entity to be filtered.
     */
    readonly entityConstructor: Constructable<EntityT>;
    /**
     * Creates an instance of Filter.
     *
     * @param fieldName Name of the field of the entity to be filtered on
     * @param operator Function to be used for matching
     * @param value Value to be used by the operator
     * @param edmType EdmType of the field to filter on, needed for custom fields
     */
    constructor(fieldName: string, operator: FilterOperator, value: FieldT, edmType?: EdmType);
}
export declare function isFilter<T extends Entity, FieldT extends FieldType>(filterable: Filterable<T>): filterable is Filter<T, FieldT>;
export {};
//# sourceMappingURL=filter.d.ts.map