"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents a filter expression to narrow the data on a [[GetAllRequestBuilder request for multiple entities]] that match the specified criteria.
 * A filter refers to the field of an entity and restricts the request based on an operator and a value. `Entity.FIELD_NAME.operator(value)`
 *
 * Example: `Product.NAME.equals('cloud-sdk')` creates a filter for the entity `Product` that matches in case the field `NAME` equals 'cloud-sdk'.
 *
 * See also: [[Filterable]]
 * @typeparam EntityT Type of the entity to be filtered on
 * @typeparam FieldT Type of the field to be filtered by, see also: [[FieldType]]
 */
var Filter = /** @class */ (function () {
    // TODO: change the constructor to the following:
    // constructor(public field: string | Field<EntityT>, public operator: FilterOperator, public value: FieldT) {}
    // and deprecate passing a string as the field is needed later on
    /**
     * Creates an instance of Filter.
     *
     * @param fieldName Name of the field of the entity to be filtered on
     * @param operator Function to be used for matching
     * @param value Value to be used by the operator
     * @param edmType EdmType of the field to filter on, needed for custom fields
     */
    function Filter(fieldName, operator, value, edmType) {
        this.fieldName = fieldName;
        this.operator = operator;
        this.value = value;
        this.edmType = edmType;
    }
    return Filter;
}());
exports.Filter = Filter;
function isFilter(filterable) {
    return (typeof filterable['fieldName'] !== 'undefined' && typeof filterable['operator'] !== 'undefined' && typeof filterable['value'] !== 'undefined');
}
exports.isFilter = isFilter;
//# sourceMappingURL=filter.js.map