"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var moment_1 = __importDefault(require("moment"));
/**
 * Representation of a cache to transiently store objects locally for faster access.
 * @template T
 */
var Cache = /** @class */ (function () {
    function Cache(validityTime) {
        this.cache = {};
        this.defaultValidityTime = validityTime;
    }
    /**
     * Clear all cached items.
     */
    Cache.prototype.clear = function () {
        this.cache = {};
    };
    /**
     * Specifies whether an entry with a given key is defined in cache.
     * @param key The entry's key
     * @returns boolean A boolean value that indicates whether the entry exists in cache
     */
    Cache.prototype.hasKey = function (key) {
        return this.cache.hasOwnProperty(key);
    };
    /**
     * Getter of cached entries.
     * @param key The key of the entry to retrieve
     * @returns The corresponding entry to the provided key if it is still valid, returns undefined otherwise
     */
    Cache.prototype.get = function (key) {
        return this.hasKey(key) && !isExpired(this.cache[key]) ? this.cache[key].entry : undefined;
    };
    /**
     * Setter of entries in cache.
     * @param key The entry's key
     * @param entry The entry to cache
     * @param expirationTime The time expressed in UTC in which the given entry expires
     */
    Cache.prototype.set = function (key, entry, expirationTime) {
        var expires = expirationTime ? moment_1.default(expirationTime) : inferExpirationTime(this.defaultValidityTime);
        this.cache[key] = { entry: entry, expires: expires };
    };
    return Cache;
}());
exports.Cache = Cache;
function isExpired(item) {
    if (item.expires === undefined) {
        return false;
    }
    return !item.expires.isAfter(moment_1.default());
}
function inferExpirationTime(expirationTime) {
    return expirationTime ? moment_1.default().add(expirationTime) : undefined;
}
//# sourceMappingURL=cache.js.map