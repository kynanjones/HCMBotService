"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var axios_1 = __importDefault(require("axios"));
var opossum_1 = __importDefault(require("opossum"));
var util_1 = require("../util");
var destination_1 = require("./destination");
var resilience_options_1 = require("./resilience-options");
/**
 * Fetches all instance destinations from the given URI.
 *
 * @param destinationServiceUri The URI of the destination service
 * @param jwt The access token
 * @param options Options to use by retrieving destinations
 * @returns A promise resolving to a list of instance destinations
 */
function fetchInstanceDestinations(destinationServiceUri, jwt, options) {
    return fetchDestinations(destinationServiceUri, jwt, DestinationType.Instance, options);
}
exports.fetchInstanceDestinations = fetchInstanceDestinations;
/**
 * Fetches all subaccount destinations from the given URI.
 *
 * @param destinationServiceUri The URI of the destination service
 * @param jwt The access token
 * @param options Options to use by retrieving destinations
 * @returns A promise resolving to a list of subaccount destinations
 */
function fetchSubaccountDestinations(destinationServiceUri, jwt, options) {
    return fetchDestinations(destinationServiceUri, jwt, DestinationType.Subaccount, options);
}
exports.fetchSubaccountDestinations = fetchSubaccountDestinations;
var DestinationType;
(function (DestinationType) {
    DestinationType["Instance"] = "instance";
    DestinationType["Subaccount"] = "subaccount";
})(DestinationType || (DestinationType = {}));
function fetchDestinations(destinationServiceUri, jwt, type, options) {
    var targetUri = destinationServiceUri.replace(/\/$/, '') + "/destination-configuration/v1/" + type + "Destinations";
    return callDestinationService(targetUri, jwt, options)
        .then(function (response) { return response.data.map(function (d) { return destination_1.parseDestination(d); }); })
        .catch(function (error) { return Promise.reject(cloud_sdk_util_1.errorWithCause("Failed to fetch " + type + " destinations." + errorMessageFromResponse(error), error)); });
}
/**
 * Fetches a specific destination by name from the given URI, including authorization tokens.
 * For destinations with authenticationType OAuth2SAMLBearerAssertion, this call will trigger the OAuth2SAMLBearerFlow against the target destination.
 *
 * @param destinationServiceUri The URI of the destination service
 * @param jwt The access token
 * @param destinationName The name of the desired destination
 * @param options Options to use by retrieving destinations
 * @returns A Promise resolving to the destination
 */
function fetchDestination(destinationServiceUri, jwt, destinationName, options) {
    var targetUri = destinationServiceUri.replace(/\/$/, '') + "/destination-configuration/v1/destinations/" + destinationName;
    return callDestinationService(targetUri, jwt, options)
        .then(function (response) { return destination_1.parseDestination(response.data); })
        .catch(function (error) { return Promise.reject(cloud_sdk_util_1.errorWithCause("Failed to fetch destination " + destinationName + "." + errorMessageFromResponse(error), error)); });
}
exports.fetchDestination = fetchDestination;
function errorMessageFromResponse(error) {
    return cloud_sdk_util_1.propertyExists(error, 'response', 'data', 'ErrorMessage') ? " " + error.response.data.ErrorMessage : '';
}
function callDestinationService(uri, jwt, options) {
    if (options === void 0) { options = { enableCircuitBreaker: true }; }
    var config = util_1.wrapJwtInHeader(jwt);
    if (options.enableCircuitBreaker || options.enableCircuitBreaker === undefined) {
        destinationCircuitBreaker = getInstanceCircuitBreaker(destinationCircuitBreaker);
        return destinationCircuitBreaker.fire(uri, config);
    }
    return axios_1.default.get(uri, config);
}
function getInstanceCircuitBreaker(breaker) {
    return breaker === null ? opossum_1.default(axios_1.default.get, resilience_options_1.circuitBreakerDefaultOptions) : breaker;
}
var destinationCircuitBreaker = null;
//# sourceMappingURL=destination-service.js.map