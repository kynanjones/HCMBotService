"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var rambda_1 = require("rambda");
var util_1 = require("../util");
var VCAP_SERVICES = 'VCAP_SERVICES';
var DESTINATION_SERVICE = 'destination';
var SERVICE_CREDENTIALS = 'credentials';
var SERVICE_URI = 'uri';
/**
 * Basic Credentials Getter from Destination service credentials needed for JWT generator.
 *
 * @returns credentials.
 */
function getDestinationBasicCredentials() {
    var destinationCredentials = getDestinationServiceCredentials();
    var basicCredentials = {
        clientid: destinationCredentials.clientid ? destinationCredentials.clientid : null,
        clientsecret: destinationCredentials.clientsecret ? destinationCredentials.clientsecret : null
    };
    return basicCredentials;
}
exports.getDestinationBasicCredentials = getDestinationBasicCredentials;
/**
 * First 'destination' credentials getter.
 *
 * @returns 'destination' credentials object.
 *          null: if there is no existing 'destination' credentials
 */
function getDestinationServiceCredentials() {
    return rambda_1.head(getDestinationServiceCredentialsList());
}
exports.getDestinationServiceCredentials = getDestinationServiceCredentials;
/**
 * Destination credentials getter.
 *
 * @returns: list of 'credentials' objects in 'destination' service.
 */
function getDestinationServiceCredentialsList() {
    return getServiceCredentialsList(DESTINATION_SERVICE);
}
exports.getDestinationServiceCredentialsList = getDestinationServiceCredentialsList;
/**
 * Credentials list getter for a given service.
 *
 * @param service: Service name
 * @returns Fetched credentials objects of existing service in 'VCAP_SERVICES'.
 */
function getServiceCredentialsList(service) {
    var credentials = [];
    getServiceList(service).forEach(function (entry) {
        if (SERVICE_CREDENTIALS in entry) {
            credentials.push(entry[SERVICE_CREDENTIALS]);
        }
        else {
            console.warn("Skipping a service in " + service + ". Object has no " + SERVICE_CREDENTIALS);
        }
    });
    return credentials;
}
exports.getServiceCredentialsList = getServiceCredentialsList;
/**
 * Services getter for a given service.
 *
 * @param service Service name.
 * @returns List of service bindings of the given type. Returns an empty array if no service binding exists for the given type.
 */
function getServiceList(service) {
    var vcapService = getVcapService();
    if (vcapService && service in vcapService) {
        return vcapService[service];
    }
    console.warn("Service '" + service + "' not found in '" + VCAP_SERVICES + "'.");
    return [];
}
exports.getServiceList = getServiceList;
/**
 * 'VCAP_SERVICES' Getter from environment variables.
 * This function returns the VCAP_SERVICES as object or null if it is not defined (i.e. no services are bound to the application).
 *
 * @returns: 'VCAP_SERVICES' found in environment variables or null if not defined. The key denotes the name ov the service and the value is the definition.
 */
function getVcapService() {
    var env = getEnvironmentVariable(VCAP_SERVICES);
    var vcapServices;
    if (!env) {
        console.warn("'" + VCAP_SERVICES + "' is undefined in environment variables.");
        return null;
    }
    try {
        vcapServices = JSON.parse(env);
    }
    catch (error) {
        throw cloud_sdk_util_1.errorWithCause("Failed to parse environment variable " + VCAP_SERVICES + ".", error);
    }
    if (!Object.keys(vcapServices).length) {
        throw new Error("Environment variable " + VCAP_SERVICES + " is defined but empty. This should not happen.");
    }
    return vcapServices;
}
exports.getVcapService = getVcapService;
/**
 * Environment variables accessor.
 *
 * @param name Environment variable name.
 * @returns Env variable value if defined.
 *           null: If not defined.
 */
function getEnvironmentVariable(name) {
    if (process.env[name]) {
        return process.env[name];
    }
    else {
        console.info('Environment variable ' + name + ' is not defined.');
        return null;
    }
}
exports.getEnvironmentVariable = getEnvironmentVariable;
/**
 * Destination URI getter
 * NOTICE: If there exist more than one destination/uri, the function
 * returns the first entry.
 *
 * @returns: the first existing uri in destination.
 *          null: if no valid destination is found.
 */
function getDestinationServiceUri() {
    var destinationServiceCredentials = getDestinationServiceCredentialsList();
    var uris = [];
    for (var _i = 0, destinationServiceCredentials_1 = destinationServiceCredentials; _i < destinationServiceCredentials_1.length; _i++) {
        var credential = destinationServiceCredentials_1[_i];
        if (SERVICE_URI in credential) {
            uris.push(credential[SERVICE_URI]);
        }
        else {
            console.info("Skipping credential in \"" + DESTINATION_SERVICE + ". \"" + SERVICE_URI + "\" property not defined");
        }
    }
    return uris[0] || null;
}
exports.getDestinationServiceUri = getDestinationServiceUri;
/**
 * Takes a decoded JWT and uses the client_id and audience claims to determine the XSUAA service instance
 * that issued the JWT. Returns the credentials if a match is found otherwise returns null.
 * If no decoded JWT is specified, then returns the first existing XSUAA credential service plan "application".
 *
 * @param token Either an encoded or decoded JWT.
 * @returns The credentials for a match, otherwise null.
 */
function getXsuaaServiceCredentials(token) {
    if (typeof token === 'string') {
        return getXsuaaServiceCredentials(util_1.decodeJwt(token)); // Decode without verifying
    }
    return selectXsuaaInstance(token);
}
exports.getXsuaaServiceCredentials = getXsuaaServiceCredentials;
function selectXsuaaInstance(token) {
    var xsuaaInstances = getServiceList('xsuaa');
    if (!xsuaaInstances.length) {
        throw Error('No binding to an XSUAA service instance found. Please make sure to bind an instance of the XSUAA service to your application!');
    }
    var strategies = [matchingClientId, matchingAudience, takeFirstAndWarn];
    var selected = applyStrategiesInOrder(strategies, xsuaaInstances, token);
    if (selected.length > 1) {
        console.warn("Multiple XSUAA instances could be matched to the given JWT! Choosing the first one (xsappname: " + rambda_1.head(selected).credentials.xsappname + ").");
    }
    return rambda_1.head(selected).credentials;
}
function applyStrategiesInOrder(selectionStrategies, xsuaaInstances, token) {
    return selectionStrategies.reduce(function (result, strategy) { return (result.length ? result : strategy(xsuaaInstances, token)); }, []);
}
function matchingClientId(xsuaaInstances, token) {
    if (!token) {
        return [];
    }
    return xsuaaInstances.filter(function (xsuaa) { return xsuaa.credentials.clientid === token.client_id; });
}
function matchingAudience(xsuaaInstances, token) {
    if (!token) {
        return [];
    }
    return xsuaaInstances.filter(function (xsuaa) { return util_1.audiences(token).has(xsuaa.credentials.xsappname); });
}
function takeFirstAndWarn(xsuaaInstances, token) {
    console.warn("Unable to match a specific XSUAA service instance to the given JWT. The following XSUAA instances are bound: " + xsuaaInstances.map(function (x) { return x.credentials.xsappname; }) + ". The following one will be selected: " + xsuaaInstances[0].credentials.xsappname + ". This might produce errors in other parts of the system!");
    return xsuaaInstances.slice(0, 1);
}
/**
 * @deprecated Use directly exported functions instead
 */
exports.EnvironmentAccessor = {
    getDestinationBasicCredentials: getDestinationBasicCredentials,
    getDestinationServiceCredentials: getDestinationServiceCredentials,
    getDestinationServiceCredentialsList: getDestinationServiceCredentialsList,
    getServiceCredentialsList: getServiceCredentialsList,
    getServiceList: getServiceList,
    getVcapService: getVcapService,
    getEnvironmentVariable: getEnvironmentVariable,
    getDestinationServiceUri: getDestinationServiceUri,
    getXsuaaServiceCredentials: getXsuaaServiceCredentials
};
//# sourceMappingURL=environment-accessor.js.map