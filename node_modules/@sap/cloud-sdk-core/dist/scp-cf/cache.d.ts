/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { MomentInputObject } from 'moment';
interface CacheInterface<T> {
    hasKey(key: string): boolean;
    get(key: string): T | undefined;
    set(key: string, item: T, expirationTime?: number): void;
}
/**
 * Representation of a cache to transiently store objects locally for faster access.
 * @template T
 */
export declare class Cache<T> implements CacheInterface<T> {
    /**
     * Object that stores all cached entries.
     */
    private cache;
    /**
     * Default validity period for each entry in cache.
     * If undefined, all cached entries will be valid indefinitely.
     */
    private defaultValidityTime;
    constructor(validityTime?: MomentInputObject);
    /**
     * Clear all cached items.
     */
    clear(): void;
    /**
     * Specifies whether an entry with a given key is defined in cache.
     * @param key The entry's key
     * @returns boolean A boolean value that indicates whether the entry exists in cache
     */
    hasKey(key: string): boolean;
    /**
     * Getter of cached entries.
     * @param key The key of the entry to retrieve
     * @returns The corresponding entry to the provided key if it is still valid, returns undefined otherwise
     */
    get(key: string): T | undefined;
    /**
     * Setter of entries in cache.
     * @param key The entry's key
     * @param entry The entry to cache
     * @param expirationTime The time expressed in UTC in which the given entry expires
     */
    set(key: string, entry: T, expirationTime?: number): void;
}
export {};
//# sourceMappingURL=cache.d.ts.map