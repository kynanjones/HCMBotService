"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Takes an existing or a parsed destination and returns an SDK compatible destination object.
 *
 * @param destination A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
function sanitizeDestination(destination) {
    return {
        name: destination.name || null,
        url: destination.url,
        proxyType: destination.proxyType || null,
        sapClient: destination.sapClient || null,
        username: destination.username || null,
        password: destination.password || null,
        authentication: getAuthenticationType(destination),
        authTokens: 'authTokens' in destination
            ? destination.authTokens.map(function (entry) { return ({
                type: entry.type,
                value: entry.value,
                expiresIn: entry.expires_in,
                error: 'error' in entry ? entry.error : null
            }); })
            : [],
        isTrustingAllCertificates: parseTrustAll(destination.isTrustingAllCertificates),
        originalProperties: destination.originalProperties ? destination.originalProperties : destination,
        proxyConfiguration: destination.proxyConfiguration || undefined,
        tokenServiceUrl: destination.tokenServiceUrl || null,
        clientId: destination.clientId || null,
        clientSecret: destination.clientSecret || null,
        tokenServiceUser: destination.tokenServiceUser || null,
        tokenServicePassword: destination.tokenServicePassword
    };
}
exports.sanitizeDestination = sanitizeDestination;
/**
 * Takes a JSON object returned by any of the calls to the destination service and returns an SDK compatible destination object.
 *
 * @param destinationJson A JSON object returned by the destination service.
 * @returns An SDK compatible destination object.
 */
function parseDestination(destinationJson) {
    var destinationConfig = Object.keys(destinationJson).includes('destinationConfiguration')
        ? destinationJson.destinationConfiguration
        : destinationJson;
    var destination = { originalProperties: destinationJson, authTokens: destinationJson['authTokens'] ? destinationJson['authTokens'] : [] };
    Object.entries(destinationConfig).map(function (entry) {
        if (entry[0] in configMapping) {
            destination[configMapping[entry[0]]] = entry[1];
        }
    });
    return sanitizeDestination(destination);
}
exports.parseDestination = parseDestination;
function parseTrustAll(isTrustingAllCertificates) {
    if (!isTrustingAllCertificates) {
        return false;
    }
    else if (typeof isTrustingAllCertificates === 'boolean') {
        return isTrustingAllCertificates;
    }
    else {
        return isTrustingAllCertificates.toLowerCase() === 'true';
    }
}
function getAuthenticationType(destinationConfig) {
    if (destinationConfig.authentication) {
        return destinationConfig.authentication;
    }
    if (destinationConfig.username && destinationConfig.password) {
        return 'BasicAuthentication';
    }
    return 'NoAuthentication';
}
var configMapping = {
    URL: 'url',
    Name: 'name',
    User: 'username',
    Password: 'password',
    ProxyType: 'proxyType',
    'sap-client': 'sapClient',
    Authentication: 'authentication',
    TrustAll: 'isTrustingAllCertificates',
    tokenServiceURL: 'tokenServiceUrl',
    clientId: 'clientId',
    clientSecret: 'clientSecret',
    tokenServiceUser: 'tokenServiceUser',
    tokenServicePassword: 'tokenServicePassword'
};
//# sourceMappingURL=destination.js.map