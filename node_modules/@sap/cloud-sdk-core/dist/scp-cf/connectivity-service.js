"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var environment_accessor_1 = require("./environment-accessor");
var xsuaa_service_1 = require("./xsuaa-service");
/**
 * Given a destination and a JWT (required for subscriber destinations), this function will add a proxy configuration to a destination.
 * See also [[ProxyConfiguration]].
 *
 * This function will reject if no connectivity service is bound, no XSUAA service with plan application is bound or the client credentials grant with the XSUAA service fails.
 *
 * @param {Destination} destination The destination to which the proxy configuration should be added.
 * @param {string} jwt The JWT of the current user.
 * @returns {Promise<Destination>} A promise resolving to the destiation with the added proxy configuration.
 */
function addProxyConfiguration(destination, jwt) {
    return Promise.resolve()
        .then(function () { return proxyHostAndPort(); })
        .then(function (hostAndPort) { return addHeaders(hostAndPort, jwt); })
        .then(function (proxyConfiguration) { return (__assign({}, destination, { proxyConfiguration: proxyConfiguration })); });
}
exports.addProxyConfiguration = addProxyConfiguration;
function proxyHostAndPort() {
    var serviceCreds = readConnectivityServiceCredentials();
    return {
        host: serviceCreds.onpremise_proxy_host,
        port: serviceCreds.onpremise_proxy_port
    };
}
function readConnectivityServiceCredentials() {
    var serviceCredsList = environment_accessor_1.EnvironmentAccessor.getServiceCredentialsList('connectivity');
    if (!serviceCredsList.length) {
        throw new Error('No binding to a connectivity service found! Please make sure to bind an instance of the connectivity service to your app if you want to connect to on-premise destinations.');
    }
    return serviceCredsList[0];
}
function readXsuaaServiceCredentials() {
    var xsuaaInstances = environment_accessor_1.EnvironmentAccessor.getServiceList('xsuaa').filter(function (s) { return s.plan === 'application'; });
    if (!xsuaaInstances.length) {
        throw new Error('No binding to an XSUAA service found! Please make sure to bind an instance of the XSUAA service with plan "application" to your app if you want to connect to on-premise destinations.');
    }
    return xsuaaInstances[0].credentials;
}
function addHeaders(hostAndPort, jwt) {
    var connServiceCreds = readConnectivityServiceCredentials();
    var xsuaaServiceCreds = readXsuaaServiceCredentials();
    return Promise.resolve()
        .then(function () { return proxyAuthorizationHeader(connServiceCreds, xsuaaServiceCreds); })
        .then(function (proxyAuthHeader) { return (__assign({}, proxyAuthHeader, sapConnectivityAuthenticationHeader(jwt))); })
        .then(function (headers) { return (__assign({}, hostAndPort, { headers: headers })); });
}
function proxyAuthorizationHeader(connServiceCreds, xsuaaServiceCreds) {
    return xsuaa_service_1.clientCredentialsGrant(xsuaaServiceCreds, { username: connServiceCreds.clientid, password: connServiceCreds.clientsecret }).then(function (clientCredentialsResponse) { return ({
        'Proxy-Authorization': "Bearer " + clientCredentialsResponse.access_token
    }); });
}
function sapConnectivityAuthenticationHeader(jwt) {
    if (jwt) {
        return {
            'SAP-Connectivity-Authentication': "Bearer " + jwt
        };
    }
    console.warn("Unable to create \"SAP-Connectivity-Authentication\" header: no JWT found on the current request.\n    Continuing without header. Connecting to on-premise systems may not be possible.");
    return {};
}
//# sourceMappingURL=connectivity-service.js.map