"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var axios_1 = __importDefault(require("axios"));
var opossum_1 = __importDefault(require("opossum"));
var util_1 = require("../util");
var resilience_options_1 = require("./resilience-options");
/**
 * Executes a client credentials grant request.
 * If the first parameter is an instance of [[XsuaaServiceCredentials]], the response's access_token will be verified.
 * If the first parameter is an URI, the response will not be verified.
 *
 * @param xsuaaUriOrCredentials The URI or the credentials of a XSUAA service instance.
 * @param clientCredentials Client credentials for which to request a token
 * @param options Options to use by retrieving access token
 * @param customBody Object containing value required for the body request
 * @returns A promise resolving to the response
 */
function clientCredentialsGrant(xsuaaUriOrCredentials, clientCredentials, options, customBody) {
    if (customBody === void 0) { customBody = {}; }
    var authHeader = headerForClientCredentials(clientCredentials);
    var body = __assign({ grant_type: GrantType.CLIENT_CREDENTIALS }, customBody);
    return executeXsuaaPostRequest(xsuaaUriOrCredentials, authHeader, objectToXWwwUrlEncodedBodyString(body), options)
        .then(function (response) { return response; })
        .catch(function (error) { return Promise.reject(accessTokenError(error, GrantType.CLIENT_CREDENTIALS)); });
}
exports.clientCredentialsGrant = clientCredentialsGrant;
/**
 * Executes a user token grant request against the given URI.
 *
 * @param xsuaaUri The URI of the target XSUAA service instance.
 * @param userJwt The JWT of the user on whose behalf the request is executed.
 * @param clientId The client_id of the target XSUAA service instance.
 * @param options Options to use by retrieving access token
 * @returns A promise resolving to the response of the XSUAA service.
 */
function userTokenGrant(xsuaaUri, userJwt, clientId, options) {
    var authHeader = 'Bearer ' + userJwt;
    var body = objectToXWwwUrlEncodedBodyString({
        client_id: clientId,
        grant_type: GrantType.USER_TOKEN,
        response_type: 'token'
    });
    return executeXsuaaPostRequest(getTargetUri(xsuaaUri), authHeader, body, options)
        .then(function (response) { return response; })
        .catch(function (error) { return Promise.reject(accessTokenError(error, GrantType.USER_TOKEN)); });
}
exports.userTokenGrant = userTokenGrant;
/**
 * Executes a refresh token grant request against the given URI.
 * If the first parameter is an instance of [[XsuaaServiceCredentials]], the response's access_token will be verified.
 * If the first parameter is an URI, the response will not be verified.
 *
 * @param xsuaaUriOrCredentials The URI or the credentials of a XSUAA service instance.
 * @param clientCredentials The credentials (client_id, client_secret) if the target XSUAA service instance.
 * @param refreshToken The refresh token that should be used to generate a new access token.
 * @param options Options to use by retrieving access token.
 * @returns A promise resolving to the response of the XSUAA service.
 */
function refreshTokenGrant(xsuaaUriOrCredentials, clientCredentials, refreshToken, options) {
    var authHeader = headerForClientCredentials(clientCredentials);
    var body = objectToXWwwUrlEncodedBodyString({
        grant_type: GrantType.REFRESH_TOKEN,
        refresh_token: refreshToken
    });
    return executeXsuaaPostRequest(xsuaaUriOrCredentials, authHeader, body, options)
        .then(function (response) { return response; })
        .catch(function (error) { return Promise.reject(accessTokenError(error, GrantType.REFRESH_TOKEN)); });
}
exports.refreshTokenGrant = refreshTokenGrant;
function executeXsuaaPostRequest(uriOrCredentials, authHeader, body, options) {
    if (options === void 0) { options = { enableCircuitBreaker: true }; }
    if (typeof uriOrCredentials === 'string') {
        return post(uriOrCredentials, authHeader, body, options).then(function (response) { return response.data; });
    }
    return post(uriOrCredentials.url, authHeader, body, options).then(function (response) { return verifyResponse(response.data, uriOrCredentials.verificationkey); });
}
function post(uri, authHeader, body, options) {
    if (options === void 0) { options = { enableCircuitBreaker: true }; }
    var config = wrapXsuaaPostRequestHeader(authHeader);
    var targetUri = getTargetUri(uri);
    if (options.enableCircuitBreaker || options.enableCircuitBreaker === undefined) {
        xsuaaCircuitBreaker = getInstanceCircuitBreaker(xsuaaCircuitBreaker);
        return xsuaaCircuitBreaker.fire(targetUri, body, config);
    }
    return axios_1.default.post(targetUri, body, config);
}
/**
 * Calls [[verifyJwtWithKey] but ignores the decoded payload and returns the original response.
 *
 * @param response A reponse containing an access_token.
 * @param key The key.
 * @returns The original response.
 */
function verifyResponse(response, key) {
    if (!response.access_token) {
        console.warn('No access token found in response! Skipping verification.');
        return Promise.resolve(response);
    }
    return util_1.verifyJwtWithKey(response.access_token, key)
        .then(function () { return response; })
        .catch(function (error) { return Promise.reject(cloud_sdk_util_1.errorWithCause('Failed to verify token returned from XSUAA service! This should never happen!', error)); });
}
function wrapXsuaaPostRequestHeader(authHeader) {
    return {
        headers: {
            Authorization: authHeader,
            'Content-Type': 'application/x-www-form-urlencoded',
            Accept: 'application/json'
        }
    };
}
function headerForClientCredentials(clientCredentials) {
    return 'Basic ' + encodeBase64(clientCredentials.username + ":" + clientCredentials.password);
}
exports.headerForClientCredentials = headerForClientCredentials;
function encodeBase64(str) {
    return Buffer.from(str).toString('base64');
}
function objectToXWwwUrlEncodedBodyString(bodyAsObject) {
    return Object.entries(bodyAsObject)
        .map(function (kv) { return kv.join('='); })
        .join('&');
}
var GrantType;
(function (GrantType) {
    GrantType["USER_TOKEN"] = "user_token";
    GrantType["REFRESH_TOKEN"] = "refresh_token";
    GrantType["CLIENT_CREDENTIALS"] = "client_credentials";
})(GrantType || (GrantType = {}));
function getTargetUri(xsuaaUri) {
    xsuaaUri = xsuaaUri.replace(/\/$/, '');
    return xsuaaUri.endsWith('/oauth/token') ? xsuaaUri : xsuaaUri + "/oauth/token";
}
function accessTokenError(error, grant) {
    return cloud_sdk_util_1.errorWithCause("FetchTokenError: " + grantTypeMapper[grant] + " Grant failed! " + error.message, error);
}
function getInstanceCircuitBreaker(breaker) {
    return breaker === null ? opossum_1.default(axios_1.default.post, resilience_options_1.circuitBreakerDefaultOptions) : breaker;
}
var grantTypeMapper = { user_token: 'User token', refresh_token: 'Refresh token', client_credentials: 'Client credentials' };
var xsuaaCircuitBreaker = null;
//# sourceMappingURL=xsuaa-service.js.map