"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
var scp_cf_1 = require("../scp-cf");
/**
 * Decode JWT.
 * @param token JWT to be decoded
 * @returns Decoded payload.
 */
function decodeJwt(token) {
    var decodedToken = jsonwebtoken_1.default.decode(token);
    if (decodedToken === null || typeof decodedToken === 'string') {
        throw new Error('JwtError: The given jwt payload does not encode valid JSON.');
    }
    return decodedToken;
}
exports.decodeJwt = decodeJwt;
/**
 * Retrieve JWT from a request that is based on the node `IncomingMessage`. Fails if no authorization header is given or has the wrong format. Expected format is 'Bearer <TOKEN>'.
 * @param req Request to retrieve the JWT from
 * @returns JWT found in header
 */
function retrieveJwt(req) {
    var header = authHeader(req);
    if (validateAuthHeader(header)) {
        return header.split(' ')[1];
    }
}
exports.retrieveJwt = retrieveJwt;
function authHeader(req) {
    var entries = Object.entries(req.headers).find(function (_a) {
        var key = _a[0];
        return key.toLowerCase() === 'authorization';
    });
    if (entries) {
        var header = entries[1];
        // header could be a list of headers
        return Array.isArray(header) ? header[0] : header;
    }
    return undefined;
}
function validateAuthHeader(header) {
    if (typeof header === 'undefined') {
        console.warn('Authorization header not set.');
        return false;
    }
    var _a = header.split(' '), authType = _a[0], token = _a[1];
    if (typeof token === 'undefined') {
        console.warn('Token in auth header missing.');
        return false;
    }
    if (authType !== 'Bearer') {
        console.warn('Authorization type is not Bearer.');
        return false;
    }
    return true;
}
/**
 * Verifies the given JWT and returns the decoded payload.
 *
 * @param token JWT to be verified
 * @returns A Promise to the decoded and verified JWT.
 */
function verifyJwt(token) {
    return __awaiter(this, void 0, void 0, function () {
        var verificationkey;
        return __generator(this, function (_a) {
            verificationkey = scp_cf_1.getXsuaaServiceCredentials(token).verificationkey;
            if (typeof verificationkey === 'undefined') {
                throw Error('No verification key found, cannot verify jwt.');
            }
            return [2 /*return*/, verifyJwtWithKey(token, verificationkey)];
        });
    });
}
exports.verifyJwt = verifyJwt;
/**
 * Verifies the given JWT with the given key and returns the decoded payload.
 *
 * @param token JWT to be verified
 * @param key Key to use for verification
 * @returns A Promise to the decoded and verified JWT.
 */
function verifyJwtWithKey(token, key) {
    return new Promise(function (resolve, reject) {
        jsonwebtoken_1.default.verify(token, sanitizeVerificationKey(key), function (err, decodedToken) {
            if (err) {
                reject(cloud_sdk_util_1.errorWithCause('JWT invalid', err));
            }
            else {
                resolve(decodedToken);
            }
        });
    });
}
exports.verifyJwtWithKey = verifyJwtWithKey;
function sanitizeVerificationKey(key) {
    // add new line after -----BEGIN PUBLIC KEY----- and before -----END PUBLIC KEY----- because the lib won't work otherwise
    return key
        .replace(/\n/g, '')
        .replace(/(KEY\s*-+)([^\n-])/, '$1\n$2')
        .replace(/([^\n-])(-+\s*END)/, '$1\n$2');
}
/**
 * Compare two decoded JWTs based on their tenantIds.
 * @param decodedUserToken User JWT
 * @param decodedProviderToken Provider JWT
 * @returns Whether the tenant is identical.
 */
function isIdenticalTenant(decodedUserToken, decodedProviderToken) {
    return readPropertyWithWarn(decodedUserToken, 'zid') === readPropertyWithWarn(decodedProviderToken, 'zid');
}
exports.isIdenticalTenant = isIdenticalTenant;
/**
 * Get the issuer url of a decoded JWT.
 * @param decodedToken Token to read the issuer url from.
 * @returns The issuer url if available.
 */
function issuerUrl(decodedToken) {
    return readPropertyWithWarn(decodedToken, 'iss');
}
exports.issuerUrl = issuerUrl;
/**
 * Get the user id of a decoded JWT.
 * @param decodedToken Token to read the user id from.
 * @returns The user id if available.
 */
function userId(decodedToken) {
    return readPropertyWithWarn(decodedToken, 'user_id');
}
exports.userId = userId;
/**
 * Get the tenant id of a decoded JWT.
 * @param decodedToken Token to read the tenant id from.
 * @returns The tenant id if available.
 */
function tenantId(decodedToken) {
    return readPropertyWithWarn(decodedToken, 'zid');
}
exports.tenantId = tenantId;
/**
 * Retrieve the audiences of a decoded JWT based on the audiences and scopes in the token.
 * @param decodedToken Token to retrieve the audiences from.
 * @returns A set of audiences.
 */
// Comments taken from the Java SDK implementation
// Currently, scopes containing dots are allowed.
// Since the UAA builds audiences by taking the substring of scopes up to the last dot,
// scopes with dots will lead to an incorrect audience which is worked around here.
// If a JWT contains no audience, infer audiences based on the scope names in the JWT.
// This is currently necessary as the UAA does not correctly fill the audience in the user token flow.
function audiences(decodedToken) {
    if (audiencesFromAud(decodedToken).length) {
        return new Set(audiencesFromAud(decodedToken));
    }
    return new Set(audiencesFromScope(decodedToken));
}
exports.audiences = audiences;
function audiencesFromAud(decodedToken) {
    if (!(decodedToken.aud instanceof Array && decodedToken.aud.length)) {
        return [];
    }
    return decodedToken.aud.map(function (aud) { return (aud.includes('.') ? aud.substr(0, aud.indexOf('.')) : aud); });
}
function audiencesFromScope(decodedToken) {
    if (!decodedToken.scope) {
        return [];
    }
    var scopes = decodedToken.scope instanceof Array ? decodedToken.scope : [decodedToken.scope];
    return scopes.reduce(function (aud, scope) {
        if (scope.includes('.')) {
            return aud.concat([scope.substr(0, scope.indexOf('.'))]);
        }
        return aud;
    }, []);
}
/**
 * Wraps the access token in header's authorization.
 * @param token Token to attach in request header
 * @returns The request header that holds the access token
 */
function wrapJwtInHeader(token) {
    return { headers: { Authorization: 'Bearer ' + token } };
}
exports.wrapJwtInHeader = wrapJwtInHeader;
function readPropertyWithWarn(decodedJwt, property) {
    if (!decodedJwt[property]) {
        console.warn("WarningJWT: The provided JWT does not include \"" + property + "\" property.");
    }
    return decodedJwt[property];
}
//# sourceMappingURL=jwt.js.map