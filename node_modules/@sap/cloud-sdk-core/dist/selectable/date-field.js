"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var filter_1 = require("../filter");
var edm_type_field_1 = require("./edm-type-field");
// tslint:disable: max-classes-per-file
/**
 * Represents a property with a date value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
var DateFieldBase = /** @class */ (function (_super) {
    __extends(DateFieldBase, _super);
    function DateFieldBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'gt', i.e. `>`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    DateFieldBase.prototype.greaterThan = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'gt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'ge', i.e. `>=`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    DateFieldBase.prototype.greaterOrEqual = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'ge', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'lt', i.e. `<`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    DateFieldBase.prototype.lessThan = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'lt', value, this.edmType);
    };
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'le', i.e. `<=`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    DateFieldBase.prototype.lessOrEqual = function (value) {
        return new filter_1.Filter(this.fieldPath(), 'le', value, this.edmType);
    };
    return DateFieldBase;
}(edm_type_field_1.EdmTypeField));
exports.DateFieldBase = DateFieldBase;
/**
 * Represents a selectable property with a date value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
var DateField = /** @class */ (function (_super) {
    __extends(DateField, _super);
    function DateField() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DateField;
}(DateFieldBase));
exports.DateField = DateField;
/**
 * Represents a complex type property with a date value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
var ComplexTypeDatePropertyField = /** @class */ (function (_super) {
    __extends(ComplexTypeDatePropertyField, _super);
    /**
     * Creates an instance of ComplexTypeDatePropertyField.
     *
     * @param fieldName Actual name of the field used in the OData request
     * @param entityConstructor Constructor type of the entity the field belongs to
     * @param parentTypeName Name of the parent complex type
     * @param edmType Type of the field according to the metadata description
     */
    function ComplexTypeDatePropertyField(fieldName, entityConstructor, parentTypeName, edmType) {
        var _this = _super.call(this, fieldName, entityConstructor, edmType) || this;
        _this.parentTypeName = parentTypeName;
        return _this;
    }
    /**
     * Path to the field to be used in filter and order by queries. Combines the parent complex type name with the field name.
     *
     * @returns Path to the field to be used in filter and order by queries.
     */
    ComplexTypeDatePropertyField.prototype.fieldPath = function () {
        return this.parentTypeName + "/" + this.fieldName;
    };
    return ComplexTypeDatePropertyField;
}(DateFieldBase));
exports.ComplexTypeDatePropertyField = ComplexTypeDatePropertyField;
//# sourceMappingURL=date-field.js.map