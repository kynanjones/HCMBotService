"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var field_1 = require("./field");
/**
 * Represents a property of an OData entity with a complex type.
 *
 * `ComplexTypeField`s are used as static properties of VDM entities and are generated from the metadata, i.e. for each property of
 * an OData entity, that has a complex type, there exists one static instance of `ComplexTypeField` (or rather one of its subclasses) in the corresponding generated class file.
 * `ComplexTypeField`s are used to represent the domain of complex or custom structures that can be used in select, filter and order by functions.
 * For example, when constructing a query on the TimeSheetEntry entity, an instance of `ComplexTypeField<TimeSheetEntry>`
 * can be supplied as argument to the select function, e.g. `TimeSheetEntry.TIME_SHEET_DATA_FIELDS`.
 * Moreover, classes implementing this abstract class will provide property fields, that can be used for filtering and ordering.
 *
 * See also: [[Selectable]]
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
var ComplexTypeField = /** @class */ (function (_super) {
    __extends(ComplexTypeField, _super);
    /**
     * Creates an instance of ComplexTypeField.
     *
     * @param fieldName Actual name of the field used in the OData request
     * @param entityConstructor Constructor type of the entity the field belongs to
     * @param complexTypeName Type of the field according to the metadata description
     */
    function ComplexTypeField(fieldName, entityConstructor, complexTypeName) {
        var _this = _super.call(this, fieldName, entityConstructor) || this;
        _this.complexTypeName = complexTypeName;
        return _this;
    }
    return ComplexTypeField;
}(field_1.Field));
exports.ComplexTypeField = ComplexTypeField;
//# sourceMappingURL=complex-type-field.js.map