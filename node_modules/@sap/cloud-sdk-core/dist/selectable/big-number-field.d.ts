/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { BigNumber } from 'bignumber.js';
import { Constructable } from '../constructable';
import { EdmType } from '../edm-types';
import { Entity } from '../entity';
import { Filter } from '../filter';
import { EdmTypeField, SelectableEdmTypeField } from './edm-type-field';
/**
 * Represents a property with a big number value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
declare class BigNumberFieldBase<EntityT extends Entity> extends EdmTypeField<EntityT, BigNumber> {
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'gt', i.e. `>`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    greaterThan(value: BigNumber): Filter<EntityT, BigNumber>;
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'ge', i.e. `>=`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    greaterOrEqual(value: BigNumber): Filter<EntityT, BigNumber>;
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'lt', i.e. `<`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    lessThan(value: BigNumber): Filter<EntityT, BigNumber>;
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'le', i.e. `<=`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    lessOrEqual(value: BigNumber): Filter<EntityT, BigNumber>;
}
/**
 * Represents a selectable property with a big number value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
export declare class BigNumberField<EntityT extends Entity> extends BigNumberFieldBase<EntityT> implements SelectableEdmTypeField {
    readonly selectable: true;
}
/**
 * Represents a complex type property with a big number value.
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
export declare class ComplexTypeBigNumberPropertyField<EntityT extends Entity> extends BigNumberFieldBase<EntityT> {
    readonly parentTypeName: string;
    /**
     * Creates an instance of ComplexTypeBigNumberPropertyField.
     *
     * @param fieldName Actual name of the field used in the OData request
     * @param entityConstructor Constructor type of the entity the field belongs to
     * @param parentTypeName Name of the parent complex type
     * @param edmType Type of the field according to the metadata description
     */
    constructor(fieldName: string, entityConstructor: Constructable<EntityT>, parentTypeName: string, edmType: EdmType);
    /**
     * Path to the field to be used in filter and order by queries. Combines the parent complex type name with the field name.
     *
     * @returns Path to the field to be used in filter and order by queries.
     */
    fieldPath(): string;
}
export {};
//# sourceMappingURL=big-number-field.d.ts.map