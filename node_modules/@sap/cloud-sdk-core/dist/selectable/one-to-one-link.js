"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var filter_1 = require("../filter");
var order_1 = require("../order");
var link_1 = require("./link");
/**
 * Represents a link from one entity to one other linked entity (as opposed to a list of linked entities). In OData v2 a `OneToOneLink` can be used to filter and order a selection on an entity based on filters and orders on a linked entity.
 *
 * @typeparam EntityT Type of the entity to be linked from
 * @typeparam LinkedEntityT Type of the entity to be linked to
 */
var OneToOneLink = /** @class */ (function (_super) {
    __extends(OneToOneLink, _super);
    function OneToOneLink() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * List of criteria of the linked entity to order the given entity by with descending priority.
         *
         */
        _this.orderBys = [];
        return _this;
    }
    /**
     * Create a new one to one link based on a given link.
     *
     * @typeparam EntityT Type of the entity to be linked from
     * @typeparam LinkedEntityT Type of the entity to be linked to
     * @param link Link to be cloned
     * @returns Newly created link
     */
    OneToOneLink.clone = function (link) {
        var clonedLink = link_1.Link.clone(link);
        clonedLink.orderBys = link.orderBys;
        clonedLink.filters = link.filters;
        return clonedLink;
    };
    /**
     * Create order statements for the OData request based on the linked entity. The given statements have descending priority.
     *
     * Example:
     * ```
     * Entity.requestBuilder()
     *  .getAll()
     *  .orderBy(Entity.TO_LINKED_ENTITY.orderBy(asc(LinkedEntity.PROPERTY1), desc(LinkedEntity.PROPERTY2)));
     * ```
     * @param orderBy Criteria to order by
     * @returns Newly created order link
     */
    OneToOneLink.prototype.orderBy = function () {
        var orderBy = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            orderBy[_i] = arguments[_i];
        }
        return new order_1.OrderLink(this, orderBy);
    };
    /**
     * Create filter statements to be applied to the OData request based on the linked entity values.
     *
     * @param filters Filters based on the linked entity
     * @returns Newly created Filterlink
     */
    OneToOneLink.prototype.filter = function () {
        var filters = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            filters[_i] = arguments[_i];
        }
        return new filter_1.FilterLink(this, filters);
    };
    return OneToOneLink;
}(link_1.Link));
exports.OneToOneLink = OneToOneLink;
//# sourceMappingURL=one-to-one-link.js.map