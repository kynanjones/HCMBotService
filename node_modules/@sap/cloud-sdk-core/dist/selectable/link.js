"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Represents a navigation property of an OData entity.
 *
 * OData is a relational data model, i.e. entities can be related to one another.
 * For example, BusinessPartner is in a 1:n relation with BusinessPartnerAddress and in a 1:1 relation with Customer.
 * Like normal properties, navigation properties can be used for selecting (expanding) and filtering.
 * For example, when constructing a query on the BusinessPartner entity, an instance of `Link<BusinessPartner, Customer>`
 * can be passed as argument to the select function, e.g. `BusinessPartner.TO_CUSTOMER`.
 *
 * NOTE: the Link class represents navigation properties with a 1:n cardinality.
 * For navigation properties with a 1:0..1 cardinality, see [[OneToOneLink]].
 *
 * See also: [[Selectable]]
 *
 * @typeparam EntityT Type of the entity to be linked from
 * @typeparam LinkedEntityT Type of the entity to be linked to
 */
var Link = /** @class */ (function () {
    /**
     * Creates an instance of Link.
     *
     * @param fieldName Name of the linking field to be used in the OData request.
     * @param entityConstructor Constructor type of the entity the field belongs to
     * @param linkedEntity Constructor type of the linked entity
     */
    function Link(fieldName, entityConstructor, linkedEntity) {
        this.fieldName = fieldName;
        this.entityConstructor = entityConstructor;
        this.linkedEntity = linkedEntity;
        /**
         * List of selectables on the linked entity.
         */
        this.selects = [];
    }
    /**
     * Create a new link based on a given link.
     *
     * @typeparam EntityT Type of the entity to be linked from
     * @typeparam LinkedEntityT Type of the entity to be linked to
     * @param link Link to be cloned
     * @returns Newly created link
     */
    Link.clone = function (link) {
        var clonedLink = new Link(link.fieldName, link.entityConstructor, link.linkedEntity);
        clonedLink.selects = link.selects;
        return clonedLink;
    };
    /**
     * Creates a selection on a linked entity. Has the same behavior as [[GetAllRequestBuilder.select]] and [[GetByKeyRequestBuilder.select]] but for linked entities.
     *
     * See also, [[Selectable]]
     *
     * @param selects Selection of fields or links on a linked entity
     * @returns The link itself, to facilitate method chaining
     */
    Link.prototype.select = function () {
        var selects = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            selects[_i] = arguments[_i];
        }
        var link = Link.clone(this);
        link.selects = selects;
        return link;
    };
    return Link;
}());
exports.Link = Link;
//# sourceMappingURL=link.js.map