/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { Constructable } from '../constructable';
import { EdmType } from '../edm-types';
import { Entity } from '../entity';
import { Filter } from '../filter';
import { Field, FieldType } from './field';
/**
 * Represents a property of an OData entity with an Edm type.
 *
 * `EdmTypeField`s are used as static properties of VDM entities and are generated from the metadata, i.e. for each property of
 * an OData entity, that has an Edm type, there exists one static instance of `EdmTypeField` (or rather one of its subclasses) in the corresponding generated class file.
 * `EdmTypeField`s are used to represent the domain of more or less primitive values that can be used in select, filter and order by functions.
 * For example, when constructing a query on the BusinessPartner entity, an instance of `EdmTypeField<BusinessPartner, string>`
 * can be supplied as argument to the select function, e.g. `BusinessPartner.FIRST_NAME`.
 *
 * See also: [[Selectable]]
 *
 * @typeparam EntityT Type of the entity the field belongs to
 * @typeparam FieldT Type of the field
 */
export declare abstract class EdmTypeField<EntityT extends Entity, FieldT extends FieldType> extends Field<EntityT> {
    readonly edmType: EdmType;
    /**
     * Creates an instance of EdmTypeField.
     *
     * @param fieldName Actual name of the field used in the OData request
     * @param entityConstructor Constructor type of the entity the field belongs to
     * @param edmType Type of the field according to the metadata description
     */
    constructor(fieldName: string, entityConstructor: Constructable<EntityT>, edmType: EdmType);
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'eq', i.e. `==`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    equals(value: FieldT): Filter<EntityT, FieldT>;
    /**
     * Creates an instance of Filter for this field and the given value using the operator 'ne', i.e. `!=`.
     *
     * @param value Value to be used in the filter
     * @returns The resulting filter
     */
    notEquals(value: FieldT): Filter<EntityT, FieldT>;
}
/**
 * Interface denoting a selectable [[EdmTypeField]].
 */
export interface SelectableEdmTypeField {
    /**
     * This property denotes that this is a selectable edm type field.
     */
    selectable: true;
}
//# sourceMappingURL=edm-type-field.d.ts.map