/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import BigNumber from 'bignumber.js';
import { Moment } from 'moment';
import { Constructable } from '../constructable';
import { Entity, EntityIdentifiable } from '../entity';
import { Time } from '../time';
/**
 * Union type to represent all possible types of a field.
 */
export declare type FieldType = string | number | boolean | Time | Moment | BigNumber;
/**
 * Abstract representation a property of an OData entity.
 *
 * `Field`s are used as static properties of VDM entities or properties of [[ComplexTypeField]]s and are generated from the metadata, i.e. for each property of
 * an OData entity, there exists one static instance of `Field` (or rather one of its subclasses) in the corresponding generated class file.
 * Fields are used to represent the domain of values that can be used in select, filter and order by functions.
 *
 * See also: [[Selectable]], [[EdmTypeField]], [[ComplexTypeField]]
 *
 * @typeparam EntityT Type of the entity the field belongs to
 */
export declare abstract class Field<EntityT extends Entity> implements EntityIdentifiable<EntityT> {
    readonly fieldName: string;
    readonly entityConstructor: Constructable<EntityT>;
    /**
     * Creates an instance of Field.
     *
     * @param fieldName Actual name of the field used in the OData request
     * @param entityConstructor Constructor type of the entity the field belongs to
     */
    constructor(fieldName: string, entityConstructor: Constructable<EntityT>);
    /**
     * Path to the field to be used in filter and order by queries. In most cases this will just be the [[fieldName]] itself. However, for complex types for instance, the path is prefixed with the name of the complextype.
     *
     * @returns Path to the field to be used in filter and order by queries.
     */
    fieldPath(): string;
}
//# sourceMappingURL=field.d.ts.map