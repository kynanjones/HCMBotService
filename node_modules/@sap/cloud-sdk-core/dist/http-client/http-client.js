"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var cloud_sdk_util_1 = require("@sap/cloud-sdk-util");
var axios_1 = __importDefault(require("axios"));
var request_builder_1 = require("../request-builder");
var scp_cf_1 = require("../scp-cf");
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination.
 * If a destination name (and a JWT) are provided, it will try to resolve the destination.
 *
 * @param destination A destination or a destination name and a JWT.
 * @returns A [[DestinationHttpRequestConfig]].
 */
function buildHttpRequest(destination) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedDestination, headers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, resolveDestination(destination)];
                case 1:
                    resolvedDestination = _a.sent();
                    return [4 /*yield*/, buildHeaders(resolvedDestination)];
                case 2:
                    headers = _a.sent();
                    return [2 /*return*/, buildDestinationHttpRequestConfig(resolvedDestination, headers)];
            }
        });
    });
}
exports.buildHttpRequest = buildHttpRequest;
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination
 * and then merges it into the given requestConfig.
 * NOTE: If the properties baseURL, httpClient, and httpsClient exist on the given requestConfig,
 * they will be overwritten. Headers will be merged, whereby any headers built from the given destination
 * will overwrite existing headers (e.g. the Authorization header).
 *
 * @param destination A destination or a destination name and a JWT.
 * @param requestConfig Any object representing an HTTP request.
 * @returns The given request config merged with the config built for the given destination.
 */
function addDestinationToRequestConfig(destination, requestConfig) {
    return buildHttpRequest(destination).then(function (destinationConfig) { return merge(requestConfig, destinationConfig); });
}
exports.addDestinationToRequestConfig = addDestinationToRequestConfig;
/**
 * Takes as paramter a function that expects an [[HttpRequest]] and returns a Promise of [[HttpResponse]].
 * Returns a function that takes a destination and a request, builds an [[HttpRequest]] from them, and calls
 * the provided execute function.
 *
 * NOTE: If you simply want to execute a request without passing your own execute function, use [[executeHttpRequest]] instead!
 *
 * @param executeFn Optional: a function that can execute an [[HttpRequestConfig]].
 * @returns A function expecting destination and a request.
 */
exports.execute = function (executeFn) { return function (destination, requestConfig) {
    return buildHttpRequest(destination)
        .then(function (req) { return merge(requestConfig, req); })
        .then(executeFn);
}; };
/**
 * Builds a [[DestinationHttpRequestConfig]] for the given destination, merges it into the given requestConfig
 * and executes it (using Axios).
 *
 * @param destination A destination or a destination name and a JWT.
 * @param requestConfig Any object representing an HTTP request.
 * @returns An [[HttpResponse]].
 */
exports.executeHttpRequest = exports.execute(executeWithAxios);
function buildDestinationHttpRequestConfig(destination, headers) {
    return __assign({ baseURL: destination.url, headers: headers }, request_builder_1.getAgentConfig(destination));
}
function buildHeaders(destination) {
    return request_builder_1.buildHeadersForDestination(destination).catch(function (error) {
        return Promise.reject(cloud_sdk_util_1.errorWithCause('Failed to build HTTP request for destination: failed to build headers!', error));
    });
}
function resolveDestination(destination) {
    return scp_cf_1.useOrFetchDestination(destination).catch(function (error) {
        return Promise.reject(cloud_sdk_util_1.errorWithCause('Failed to build HTTP request for destination: failed to load destination!', error));
    });
}
function merge(generic, request) {
    return __assign({}, generic, request, { headers: __assign({}, (generic['headers'] || {}), request.headers) });
}
function executeWithAxios(request) {
    return axios_1.default.request(request);
}
//# sourceMappingURL=http-client.js.map