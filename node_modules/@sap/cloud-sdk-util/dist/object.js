"use strict";
/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var rambda_1 = require("rambda");
/**
 * Checks if a chain of properties exists on the given object.
 *
 * @param obj The object to be checked.
 * @param properties Chained properties.
 * @returns True if the property chain leads to a truthy value, false otherwise.
 */
function propertyExists(obj) {
    var properties = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        properties[_i - 1] = arguments[_i];
    }
    if (!properties.length) {
        return true;
    }
    if (obj && obj.hasOwnProperty(properties[0])) {
        return propertyExists.apply(void 0, [obj[properties[0]]].concat(properties.slice(1)));
    }
    return false;
}
exports.propertyExists = propertyExists;
/**
 * Calls rambda's assoc function if the provided value is neither null nor undefined.
 * Note that this is different to JS idiomatic checks for truthy/falsy values, i.e. an empty string will result in assoc being called.
 *
 * @param key The key to associate with the given value.
 * @param value The value to associate with the given key.
 * @param obj The object on which to create the association.
 * @returns A copy of the input object with the new key-value pair if the value is neither null nor undefined.
 */
exports.assocSome = function (key, value) { return function (obj) {
    if (typeof value !== 'undefined' && value !== null) {
        return rambda_1.assoc(key, value)(obj);
    }
    return obj;
}; };
/**
 * Calls rambda's merge function if second object is neither null nor undefined.
 *
 * @param a The object to merge into.
 * @param b The object which to merge into a.
 * @returns A copy of the merge(a, b) or a if b is undefined or null.
 */
exports.mergeSome = function (a, b) {
    if (typeof b !== 'undefined' && b !== null) {
        return rambda_1.merge(a, b);
    }
    return a;
};
//# sourceMappingURL=object.js.map