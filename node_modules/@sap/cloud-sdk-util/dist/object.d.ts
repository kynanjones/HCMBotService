/*!
 * Copyright (c) 2019 SAP SE or an SAP affiliate company. All rights reserved.
 */
import { MapType } from './types';
/**
 * Checks if a chain of properties exists on the given object.
 *
 * @param obj The object to be checked.
 * @param properties Chained properties.
 * @returns True if the property chain leads to a truthy value, false otherwise.
 */
export declare function propertyExists(obj: object, ...properties: string[]): boolean;
/**
 * Calls rambda's assoc function if the provided value is neither null nor undefined.
 * Note that this is different to JS idiomatic checks for truthy/falsy values, i.e. an empty string will result in assoc being called.
 *
 * @param key The key to associate with the given value.
 * @param value The value to associate with the given key.
 * @param obj The object on which to create the association.
 * @returns A copy of the input object with the new key-value pair if the value is neither null nor undefined.
 */
export declare const assocSome: <T>(key: string, value?: any) => (obj: T) => T;
/**
 * Calls rambda's merge function if second object is neither null nor undefined.
 *
 * @param a The object to merge into.
 * @param b The object which to merge into a.
 * @returns A copy of the merge(a, b) or a if b is undefined or null.
 */
export declare const mergeSome: (a: MapType<any>, b?: MapType<any>) => MapType<any>;
//# sourceMappingURL=object.d.ts.map